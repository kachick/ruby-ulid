class ULID < Object
  VERSION: String
  TIMESTAMP_ENCODED_LENGTH: 10
  RANDOMNESS_ENCODED_LENGTH: 16
  ENCODED_LENGTH: 26
  TIMESTAMP_OCTETS_LENGTH: 6
  RANDOMNESS_OCTETS_LENGTH: 10
  OCTETS_LENGTH: 16
  MAX_MILLISECONDS: 281474976710655
  MAX_ENTROPY: 1208925819614629174706175
  MAX_INTEGER: 340282366920938463463374607431768211455
  TIME_FORMAT_IN_INSPECT: '%Y-%m-%d %H:%M:%S.%3N %Z'
  RANDOM_INTEGER_GENERATOR: ^() -> Integer
  PATTERN_WITH_CROCKFORD_BASE32_SUBSET: Regexp
  STRICT_PATTERN_WITH_CROCKFORD_BASE32_SUBSET: Regexp
  SCANNING_PATTERN: Regexp
  UUIDV4_PATTERN: Regexp
  MIN: ULID
  MAX: ULID
  include Comparable

  type milliseconds = Integer
  type moment = Time | milliseconds

  class Error < StandardError
  end

  class OverflowError < Error
  end

  class ParserError < Error
  end

  class UnexpectedError < Error
  end

  # Private module
  module Utils
    def self.encode_base32hex: (milliseconds: milliseconds, entropy: Integer) -> String

    def self.current_milliseconds: -> milliseconds

    def self.milliseconds_from_moment: (moment moment) -> milliseconds

    def self.reasonable_entropy: -> Integer

    def self.milliseconds_from_time: (Time time) -> milliseconds

    def self.safe_get_class_name: (untyped object) -> String

    def self.make_sharable_constants: (Module) -> void

    def self.ractor_can_make_shareable_time?: -> bool
  end

  # Private module
  module CrockfordBase32
    ENCODING_STRING: String
    CROCKFORD_TR_PATTERN: String
    BASE32HEX_TR_PATTERN: String
    VARIANT_TR_PATTERN: String
    NORMALIZED_TR_PATTERN: String

    def self.encode: (Integer integer) -> String

    def self.decode: (String string) -> Integer

    def self.normalize: (String string) -> String

    def self.from_base32hex: (String base32hex) -> String
  end

  class MonotonicGenerator
    include MonitorMixin

    # Returned value is `basically not` Thread-safety
    # If you want to keep Thread-safety, keep to call {#generate} only in same {#synchronize} block
    #
    # ```ruby
    # generator.synchronize do
    #   generator.prev
    #   generator.inspect
    #   generator.generate
    # end
    # ```
    attr_reader prev: ULID | nil

    # See [How to keep `Sortable` even if in same timestamp](https://github.com/kachick/ruby-ulid#how-to-keep-sortable-even-if-in-same-timestamp)
    # The `Thread-safety` is implemented with [Monitor](https://bugs.ruby-lang.org/issues/16255)
    def generate: (?moment: moment) -> ULID

    # Just providing similar api as `ULID.generate` and `ULID.encode` relation. No performance benefit exists in monotonic generator's one.
    def encode: (?moment: moment) -> String

    # Returned value is `basically not` Thread-safety
    # If you want to keep Thread-safety, keep to call {#generate} only in same {#synchronize} block
    #
    # ```ruby
    # generator.synchronize do
    #   generator.prev
    #   generator.inspect
    #   generator.generate
    # end
    # ```
    def inspect: -> String
    alias to_s inspect

    private

    def initialize: -> void

    def prev=: (ULID?) -> void
  end

  interface _ToULID
    def to_ulid: () -> ULID
  end

  type full_octets = [Integer, Integer, Integer, Integer, Integer, Integer, Integer, Integer, Integer, Integer, Integer, Integer, Integer, Integer, Integer, Integer] | Array[Integer]
  type timestamp_octets = [Integer, Integer, Integer, Integer, Integer, Integer] | Array[Integer]
  type randomness_octets = [Integer, Integer, Integer, Integer, Integer, Integer, Integer, Integer, Integer, Integer] | Array[Integer]
  type period = Range[Time] | Range[nil] | Range[ULID]

  @integer: Integer
  @encoded: String

  # Retuns a ULID
  #
  # They are sortable when generated in different timestamp with milliseconds precision
  #
  # ```ruby
  # ulids = 1000.times.map do
  #   sleep(0.001)
  #   ULID.generate
  # end
  # ulids.uniq(&:to_time).size #=> 1000
  # ulids.sort == ulids #=> true
  # ```
  #
  # `ULID.generate` can take fixed `Time` instance.
  #  See also the short hand [ULID.at](https://kachick.github.io/ruby-ulid/ULID.html#at-class_method)
  #
  # ```ruby
  # time = Time.at(946684800).utc #=> 2000-01-01 00:00:00 UTC
  # ULID.generate(moment: time) #=> ULID(2000-01-01 00:00:00.000 UTC: 00VHNCZB00N018DCPJA4H9379P)
  # ULID.generate(moment: time) #=> ULID(2000-01-01 00:00:00.000 UTC: 00VHNCZB006WQT3JTMN0T14EBP)
  # ```
  #
  # The basic generator prefers `randomness`, it does not guarantee `sortable` for same milliseconds ULIDs.
  #
  # ```ruby
  # ulids = 10000.times.map do
  #   ULID.generate
  # end
  # ulids.uniq(&:to_time).size #=> 35 (the size is not fixed, might be changed in environment)
  # ulids.sort == ulids #=> false
  # ```
  #
  # If you want to keep sortable even if in same timestamp, See also [ULID::MonotonicGenerator](https://github.com/kachick/ruby-ulid#how-to-keep-sortable-even-if-in-same-timestamp)
  #
  def self.generate: (?moment: moment, ?entropy: Integer) -> ULID

  # Retuns encoded and normalzied String.
  # It has same arguments signatures as `.generate`. So can be used for just ID creation usecases without needless object creation.
  #
  def self.encode: (?moment: moment, ?entropy: Integer) -> String

  # Shorthand of `ULID.generate(moment: Time)`
  # See also [ULID.generate](https://kachick.github.io/ruby-ulid/ULID.html#generate-class_method)
  #
  # ```ruby
  # time = Time.at(946684800).utc #=> 2000-01-01 00:00:00 UTC
  # ULID.at(time) #=> ULID(2000-01-01 00:00:00.000 UTC: 00VHNCZB002W5BGWWKN76N22H6)
  #
  # ulids = 1000.times.map do |n|
  #   ULID.at(time + n)
  # end
  # ulids.sort == ulids #=> true
  # ```
  def self.at: (Time time) -> ULID

  # `ULID` can be element of the `Range`. If you generated the IDs in monotonic generator, ID based filtering is easy and reliable
  #
  # ```ruby
  # include_end = ulid1..ulid2
  # exclude_end = ulid1...ulid2
  #
  # ulids.grep(one_of_the_above)
  # ulids.grep_v(one_of_the_above)
  # ```
  #
  # When want to filter ULIDs with `Time`, we should consider to handle the precision.
  # So this gem provides `ULID.range` to generate reasonable `Range[ULID]` from `Range[Time]`
  #
  # ```ruby
  # # Both of below, The begin of `Range[ULID]` will be the minimum in the floored milliseconds of the time1
  # include_end = ULID.range(time1..time2) #=> The end of `Range[ULID]` will be the maximum in the floored milliseconds of the time2
  # exclude_end = ULID.range(time1...time2) #=> The end of `Range[ULID]` will be the minimum in the floored milliseconds of the time2
  #
  # # Below patterns are acceptable
  # pinpointing = ULID.range(time1..time1) #=> This will match only for all IDs in `time1`
  # until_the_end = ULID.range(..time1) #=> This will match only for all IDs upto `time1`
  # until_the_ulid_limit = ULID.range(time1..) # This will match only for all IDs from `time1` to max value of the ULID limit
  #
  # # So you can use the generated range objects as below
  # ulids.grep(one_of_the_above)
  # ulids.grep_v(one_of_the_above)
  # #=> I hope the results should be actually you want!
  # ```
  #
  def self.range: (period period) -> Range[ULID]

  # Returns new `Time` with truncating excess precisions in ULID spec.
  #
  # ```ruby
  # time = Time.at(946684800, Rational('123456.789')).utc
  # #=> 2000-01-01 00:00:00.123456789 UTC
  # ULID.floor(time) #=> 2000-01-01 00:00:00.123 UTC
  # ```
  def self.floor: (Time time) -> Time

  # Return ULID instance from encoded String.
  #
  # ```ruby
  # ulid = ULID.parse('01ARZ3NDEKTSV4RRFFQ69G5FAV')
  # #=> ULID(2016-07-30 23:54:10.259 UTC: 01ARZ3NDEKTSV4RRFFQ69G5FAV)
  # ```
  def self.parse: (_ToStr string) -> ULID

  type time_in = String | Integer | nil

  # Return Time instance from encoded String.
  # See also `ULID.encode` for similar purpose.
  #
  # ```ruby
  # time = ULID.decode_time('01ARZ3NDEKTSV4RRFFQ69G5FAV')
  # #=> 2016-07-30 23:54:10.259 UTC
  # ULID.decode_time('01ARZ3NDEKTSV4RRFFQ69G5FAV', in: '+09:00')
  # #=> 2016-07-31 08:54:10.259 +0900
  # ```
  def self.decode_time: (_ToStr string, ?in: time_in) -> Time

  # Get ULID instance from unnormalized String that encoded in Crockford's base32.
  #
  # http://www.crockford.com/base32.html
  #
  # * Ignore Hyphens (-)
  # * Mapping 0 O o => 0, 1 I i L l => 1
  #
  # ```ruby
  # ulid = ULID.parse_variant_format('01G70Y0Y7G-ZLXWDIREXERGSDoD')
  # #=> ULID(2022-07-03 02:25:22.672 UTC: 01G70Y0Y7GZ1XWD1REXERGSD0D)
  # ```
  #
  # See also [ulid/spec#57](https://github.com/ulid/spec/pull/57) and [ulid/spec#3](https://github.com/ulid/spec/issues/3)
  def self.parse_variant_format: (_ToStr string) -> ULID

  # ```ruby
  # # Currently experimental feature, so needed to load the extension.
  # require 'ulid/uuid'
  #
  # # Basically reversible
  # ulid = ULID.from_uuidv4('0983d0a2-ff15-4d83-8f37-7dd945b5aa39')
  # #=> ULID(2301-07-10 00:28:28.821 UTC: 09GF8A5ZRN9P1RYDVXV52VBAHS)
  # ulid.to_uuidv4 #=> "0983d0a2-ff15-4d83-8f37-7dd945b5aa39"
  # ```
  #
  # See also [Why this is experimental?](https://github.com/kachick/ruby-ulid/issues/76)
  def self.from_uuidv4: (String uuid) -> ULID
  def self.from_integer: (Integer integer) -> ULID

  # Returns termination values for ULID spec.
  #
  # ```ruby
  # ULID.min
  # #=> ULID(1970-01-01 00:00:00.000 UTC: 00000000000000000000000000)
  # ```
  #
  # It can take `Time` instance as an optional argument.
  # Then returns ULID that has minimum value of randomness part in the timestamp.
  #
  # ```ruby
  # time = Time.at(946684800, Rational('123456.789')).utc
  # #=> 2000-01-01 00:00:00.123456789 UTC
  # ULID.min(time)
  # #=> ULID(2000-01-01 00:00:00.123 UTC: 00VHNCZB3V0000000000000000)
  # ```
  #
  # See also [ULID.max](https://kachick.github.io/ruby-ulid/ULID.html#max-class_method)
  def self.min: (?moment moment) -> ULID

  # Returns termination values for ULID spec.
  #
  # ```ruby
  # ULID.max
  # #=> ULID(10889-08-02 05:31:50.655 UTC: 7ZZZZZZZZZZZZZZZZZZZZZZZZZ)
  # ```
  #
  # It can take `Time` instance as an optional argument.
  # Then returns ULID that has maximum value of randomness part in the timestamp.
  #
  # ```ruby
  # time = Time.at(946684800, Rational('123456.789')).utc
  # #=> 2000-01-01 00:00:00.123456789 UTC
  # ULID.max(time)
  # #=> ULID(2000-01-01 00:00:00.123 UTC: 00VHNCZB3VZZZZZZZZZZZZZZZZ)
  # ```
  #
  # See also [ULID.min](https://kachick.github.io/ruby-ulid/ULID.html#min-class_method)
  def self.max: (?moment moment) -> ULID

  # Returns random ULIDs.
  #
  # Basically ignores generating time.
  #
  # ```ruby
  # ULID.sample #=> ULID(2545-07-26 06:51:20.085 UTC: 0GGKQ45GMNMZR6N8A8GFG0ZXST)
  # ULID.sample #=> ULID(5098-07-26 21:31:06.946 UTC: 2SSBNGGYA272J7BMDCG4Z6EEM5)
  # ULID.sample(0) #=> []
  # ULID.sample(1) #=> [ULID(2241-04-16 03:31:18.440 UTC: 07S52YWZ98AZ8T565MD9VRYMQH)]
  # ULID.sample(5)
  # #=>
  # #[ULID(5701-04-29 12:41:19.647 UTC: 3B2YH2DV0ZYDDATGTYSKMM1CMT),
  # # ULID(2816-08-01 01:21:46.612 UTC: 0R9GT6RZKMK3RG02Q2HAFVKEY2),
  # # ULID(10408-10-05 17:06:27.848 UTC: 7J6CPTEEC86Y24EQ4F1Y93YYN0),
  # # ULID(2741-09-02 16:24:18.803 UTC: 0P4Q4V34KKAJW46QW47WQB5463),
  # # ULID(2665-03-16 14:50:22.724 UTC: 0KYFW9DWM4CEGFNTAC6YFAVVJ6)]
  # ```
  #
  # You can specify a range object for the timestamp restriction, See also [ULID.range](https://kachick.github.io/ruby-ulid/ULID.html#range-class_method).
  #
  # ```ruby
  # ulid1 = ULID.parse('01F4A5Y1YAQCYAYCTC7GRMJ9AA') #=> ULID(2021-04-27 17:27:22.826 UTC: 01F4A5Y1YAQCYAYCTC7GRMJ9AA)
  # ulid2 = ULID.parse('01F4PTVCSN9ZPFKYTY2DDJVRK4') #=> ULID(2021-05-02 15:23:48.917 UTC: 01F4PTVCSN9ZPFKYTY2DDJVRK4)
  # ulids = ULID.sample(1000, period: ulid1..ulid2)
  # ulids.uniq.size #=> 1000
  # ulids.take(5)
  # #=>
  # #[ULID(2021-05-02 06:57:19.954 UTC: 01F4NXW02JNB8H0J0TK48JD39X),
  # # ULID(2021-05-02 07:06:07.458 UTC: 01F4NYC372GVP7NS0YAYQGT4VZ),
  # # ULID(2021-05-01 06:16:35.791 UTC: 01F4K94P6F6P68K0H64WRDSFKW),
  # # ULID(2021-04-27 22:17:37.844 UTC: 01F4APHGSMFJZQTGXKZBFFBPJP),
  # # ULID(2021-04-28 20:17:55.357 UTC: 01F4D231MXQJXAR8G2JZHEJNH3)]
  # ULID.sample(10, period: ulid1.to_time..ulid2.to_time)
  # #=>
  # # [ULID(2021-04-29 06:44:41.513 UTC: 01F4E5YPD9XQ3MYXWK8ZJKY8SW),
  # #  ULID(2021-05-01 00:35:06.629 UTC: 01F4JNKD85SVK1EAEYSJGF53A2),
  # #  ULID(2021-05-02 12:45:28.408 UTC: 01F4PHSEYRG9BWBEWMRW1XE6WW),
  # #  ULID(2021-05-01 03:06:09.130 UTC: 01F4JY7ZBABCBMX16XH2Q4JW4W),
  # #  ULID(2021-04-29 21:38:58.109 UTC: 01F4FS45DX4049JEQK4W6TER6G)]
  # ```
  def self.sample: (?period: period) -> ULID
                 | (Integer number, ?period: period?) -> Array[ULID]

  # Returns normalized string
  #
  # ```ruby
  # ULID.normalize('01G70Y0Y7G-Z1XWDAREXERGSDDD') #=> "01G70Y0Y7GZ1XWDAREXERGSDDD"
  # ULID.normalize('-olarz3-noekisv4rrff-q6ig5fav--') #=> "01ARZ3N0EK1SV4RRFFQ61G5FAV"
  # ULID.normalize('01G70Y0Y7G_Z1XWDAREXERGSDDD') #=> ULID::ParserError
  # ```
  #
  # See also [ulid/spec#57](https://github.com/ulid/spec/pull/57) and [ulid/spec#3](https://github.com/ulid/spec/issues/3)
  def self.normalize: (_ToStr string) -> String

  # Returns `true` if it is normalized string
  #
  # ```ruby
  # ULID.normalized?('01G70Y0Y7GZ1XWDAREXERGSDDD') #=> true
  # ULID.normalized?('01G70Y0Y7G-Z1XWDAREXERGSDDD') #=> false
  # ULID.normalized?(ULID.generate.to_s.downcase) #=> false
  # ULID.normalized?('01G70Y0Y7G_Z1XWDAREXERGSDDD') #=> false (Not raising ULID::ParserError)
  # ```
  #
  # See also [ulid/spec#57](https://github.com/ulid/spec/pull/57) and [ulid/spec#3](https://github.com/ulid/spec/issues/3)
  def self.normalized?: (_ToStr string) -> bool
                      | (untyped) -> false

  # Returns `true` if it is valid in ULID format variants
  #
  # ```ruby
  # ULID.valid_as_variant_format?(ULID.generate.to_s.downcase) #=> true
  # ULID.valid_as_variant_format?('01G70Y0Y7G-Z1XWDAREXERGSDDD') #=> true
  # ULID.valid_as_variant_format?('01G70Y0Y7G_Z1XWDAREXERGSDDD') #=> false
  # ```
  #
  # See also [ulid/spec#57](https://github.com/ulid/spec/pull/57) and [ulid/spec#3](https://github.com/ulid/spec/issues/3)
  def self.valid_as_variant_format?: (_ToStr string) -> bool
                             | (untyped) -> false

  # Returns parsed ULIDs from given String for rough operations.
  #
  # ```ruby
  # json =<<'EOD'
  # {
  #   "id": "01F4GNAV5ZR6FJQ5SFQC7WDSY3",
  #   "author": {
  #     "id": "01F4GNBXW1AM2KWW52PVT3ZY9X",
  #     "name": "kachick"
  #   },
  #   "title": "My awesome blog post",
  #   "comments": [
  #     {
  #       "id": "01F4GNCNC3CH0BCRZBPPDEKBKS",
  #       "commenter": {
  #         "id": "01F4GNBXW1AM2KWW52PVT3ZY9X",
  #         "name": "kachick"
  #       }
  #     },
  #     {
  #       "id": "01F4GNCXAMXQ1SGBH5XCR6ZH0M",
  #       "commenter": {
  #         "id": "01F4GND4RYYSKNAADHQ9BNXAWJ",
  #         "name": "pankona"
  #       }
  #     }
  #   ]
  # }
  # EOD
  #
  # ULID.scan(json).to_a
  # #=>
  # # [ULID(2021-04-30 05:51:57.119 UTC: 01F4GNAV5ZR6FJQ5SFQC7WDSY3),
  # #  ULID(2021-04-30 05:52:32.641 UTC: 01F4GNBXW1AM2KWW52PVT3ZY9X),
  # #  ULID(2021-04-30 05:52:56.707 UTC: 01F4GNCNC3CH0BCRZBPPDEKBKS),
  # #  ULID(2021-04-30 05:52:32.641 UTC: 01F4GNBXW1AM2KWW52PVT3ZY9X),
  # #  ULID(2021-04-30 05:53:04.852 UTC: 01F4GNCXAMXQ1SGBH5XCR6ZH0M),
  # #  ULID(2021-04-30 05:53:12.478 UTC: 01F4GND4RYYSKNAADHQ9BNXAWJ)]
  # ```
  def self.scan:  (_ToStr string) -> Enumerator[self, singleton(ULID)]
                | (_ToStr string) { (ULID ulid) -> void } -> singleton(ULID)

  def self.try_convert: (_ToULID) -> ULID
                      | (untyped) -> nil

  # ```ruby
  # ulid = ULID.generate
  # #=> ULID(2021-04-27 17:27:22.826 UTC: 01F4A5Y1YAQCYAYCTC7GRMJ9AA)
  # ulid.milliseconds #=> 1619544442826
  # ```
  attr_reader milliseconds: Integer

  attr_reader entropy: Integer

  # Private api. (Actually defined protected visibility)
  attr_reader encoded: String

  # ```ruby
  # ulid = ULID.generate
  # #=> ULID(2021-04-27 17:27:22.826 UTC: 01F4A5Y1YAQCYAYCTC7GRMJ9AA)
  # ulid.encode #=> "01F4A5Y1YAQCYAYCTC7GRMJ9AA"
  # ```
  def encode: -> String
  alias to_s encode

  # ```ruby
  # ulid = ULID.generate
  # #=> ULID(2021-04-27 17:27:22.826 UTC: 01F4A5Y1YAQCYAYCTC7GRMJ9AA)
  # ulid.to_i #=> 1957909092946624190749577070267409738
  # ```
  def to_i: -> Integer

  # Returns integer for making as a hash key use-case
  def hash: -> Integer

  # Basically same as String based sort.
  #
  # ```ruby
  # ulids = ULID.sample(10000); nil
  # ulids.map(&:to_s).sort == ulids.sort.map(&:to_s)
  # #=> true
  # ```
  #
  # To be precise, this sorting unaffected with `case sensitive or not` and might handle [ulid/spec#57](https://github.com/ulid/spec/pull/57) in future.
  # So preferable than `lexicographically sortable` in actual case.
  #
  # This returns -1 | 0 | 1 for ULIDs. However defined as returning Integer. It is caused on ruby/rbs current definition.
  #   https://github.com/ruby/ruby/blob/cd34f56d450f2310cceaf4c5f34d23eddfda58e8/numeric.c#L4646-L4660
  #   https://github.com/ruby/rbs/blob/14abbbae8885a09a2ed82de2ef31d67a9c0a108d/core/integer.rbs#L461-L462
  #
  def <=>: (ULID other) -> Integer
         | (untyped other) -> nil

  # ```ruby
  # ulid = ULID.generate
  # ulid.inspect #=> "ULID(2021-04-27 17:27:22.826 UTC: 01F4A5Y1YAQCYAYCTC7GRMJ9AA)"
  # ```
  def inspect: -> String

  # ```ruby
  # ULID.parse('4NNB20D9C1ME2NGMTX51ERZJX0') == ULID.parse('4nnb20d9c1me2ngmtx51erzjx0')
  # #=> true
  # ```
  def eql?: (ULID other) -> bool
          | (untyped other) -> false
  alias == eql?

  # Return `true` for same value of ULID, variant formats of strings, same Time in ULID precision(msec).
  # Do not consider integer, octets and partial strings, then returns `false`.
  #
  # ```ruby
  # ulid = ULID.parse('01G6Z7Q4RSH97E6QHAC7VK19G2')
  # ulid === ULID.parse(ulid.to_s)
  # #=> true
  # ulid === ulid.to_s.downcase
  # #=> true
  # ulid === ulid.to_time
  # #=> true
  # ulid === ulid.to_i
  # #=> false
  # ulid === ulid.next
  # #=> false
  # ```
  def ===: (ULID | String | Time other) -> bool
         | (untyped other) -> false

  # ```ruby
  # ULID.parse('01F4A5Y1YAQCYAYCTC7GRMJ9AA').to_time
  # #=> 2021-04-27 17:27:22.826 UTC
  # ULID.parse('01F4A5Y1YAQCYAYCTC7GRMJ9AA').to_time(in: '+09:00')
  # #=> 2021-04-28 02:27:22.826 +0900
  # ```
  def to_time: (?in: time_in) -> Time

  # ```ruby
  # ulid = ULID.generate
  # #=> ULID(2021-04-27 17:27:22.826 UTC: 01F4A5Y1YAQCYAYCTC7GRMJ9AA)
  # ulid.timestamp #=> "01F4A5Y1YA"
  # ```
  def timestamp: -> String

  # ```ruby
  # ulid = ULID.generate
  # #=> ULID(2021-04-27 17:27:22.826 UTC: 01F4A5Y1YAQCYAYCTC7GRMJ9AA)
  # ulid.randomness #=> "QCYAYCTC7GRMJ9AA"
  # ```
  def randomness: -> String

  # Intentionally avoiding to use `Record type` ref: https://github.com/ruby/rbs/blob/4fb4c33b2325d1a73d79ff7aaeb49f21cec1e0e5/docs/syntax.md#record-type
  # Because the returning values are not fixed.
  def patterns: -> Hash[Symbol, Regexp | String]
  def octets: -> full_octets
  def timestamp_octets: -> timestamp_octets
  def randomness_octets: -> randomness_octets

  # ```ruby
  # # Currently experimental feature, so needed to load the extension.
  # require 'ulid/uuid'
  #
  # # Basically reversible
  # ulid = ULID.from_uuidv4('0983d0a2-ff15-4d83-8f37-7dd945b5aa39')
  # #=> ULID(2301-07-10 00:28:28.821 UTC: 09GF8A5ZRN9P1RYDVXV52VBAHS)
  # ulid.to_uuidv4 #=> "0983d0a2-ff15-4d83-8f37-7dd945b5aa39"
  # ```
  #
  # See also [Why this is experimental?](https://github.com/kachick/ruby-ulid/issues/76)
  def to_uuidv4: -> String

  # Returns next(successor) ULID.
  # Especially `ULID#succ` makes it possible `Range[ULID]#each`.
  #
  # NOTE: But basically `Range[ULID]#each` should not be used, incrementing 128 bits IDs are not reasonable operation in most case
  #
  # ```ruby
  # ULID.parse('01BX5ZZKBKZZZZZZZZZZZZZZZY').next.to_s #=> "01BX5ZZKBKZZZZZZZZZZZZZZZZ"
  # ULID.parse('01BX5ZZKBKZZZZZZZZZZZZZZZZ').next.to_s #=> "01BX5ZZKBM0000000000000000"
  # ULID.parse('7ZZZZZZZZZZZZZZZZZZZZZZZZZ').next #=> nil
  # ```
  #
  # See also [ULID#pred](https://kachick.github.io/ruby-ulid/ULID.html#pred-instance_method)
  def succ: -> ULID?
  alias next succ

  # Returns predecessor ULID.
  #
  # ```ruby
  # ULID.parse('01BX5ZZKBK0000000000000001').pred.to_s #=> "01BX5ZZKBK0000000000000000"
  # ULID.parse('01BX5ZZKBK0000000000000000').pred.to_s #=> "01BX5ZZKBJZZZZZZZZZZZZZZZZ"
  # ULID.parse('00000000000000000000000000').pred #=> nil
  # ```
  #
  # See also [ULID#succ](https://kachick.github.io/ruby-ulid/ULID.html#succ-instance_method)
  def pred: -> ULID?

  def marshal_dump: -> Integer

  def marshal_load: (Integer integer) -> void

  # Returns `self`
  def to_ulid: -> self

  # Returns same ID with different Ruby object.
  def dup: -> ULID

  # Returns same ID with different Ruby object.::Array::_Pattern
  # `freeze` keyarg is just provided for standardized API with `Object#clone`, however it accepts only `true`.
  def clone: (?freeze: true) -> ULID

  private

  def initialize: (milliseconds: milliseconds, entropy: Integer, integer: Integer, encoded: String) -> void
end
